package com.Scriza.MoneyLive.User.Entity;

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import java.util.Random;

@Entity
@Table(name = "users")
@Getter
@Setter
@NoArgsConstructor
public class User {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id; // Database primary key

    private String userId; // Autogenerated based on userName and random numbers

    private String userName; // Name of the user

    private String mobileNumber; // Mobile number of the user

    private String emailId; // Email ID of the user

    @Column(unique = true)
    private String referralCode; // Autogenerated unique referral code (6 alphabets)

    @Column(unique = true)
    private String walletAddress; // Autogenerated unique wallet address (16 alphanumeric)

    private int totalBets;

    private double playedAmount;

    private double totalDeposit;

    private double totalWithdraw;

    private int numberOfDeposits;

    private int numberOfWithdrawals;

    private String status;

    private int age; // Age of the user

    private String gender; // Male or Female

    private String password; // User's password (should be hashed in real-world apps)

    private String createdDate; // Registration date (optional)

    // Method to generate userId, referralCode, and walletAddress
    public void generateFields() {
        this.referralCode = generateReferralCode();
        this.walletAddress = generateWalletAddress();
        this.userId = generateUserId();
    }

    // Generate a unique 6-character alphabetical referral code
    private String generateReferralCode() {
        StringBuilder referralCode = new StringBuilder();
        Random random = new Random();
        while (referralCode.length() < 6) {
            char ch = (char) (random.nextInt(26) + 'A'); // Generate random letter A-Z
            referralCode.append(ch);
        }
        return referralCode.toString();
    }

    // Generate a unique 16-character alphanumeric wallet address
    private String generateWalletAddress() {
        StringBuilder walletAddress = new StringBuilder();
        Random random = new Random();
        String chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
        for (int i = 0; i < 16; i++) {
            walletAddress.append(chars.charAt(random.nextInt(chars.length())));
        }
        return walletAddress.toString();
    }

    // Generate userId based on userName and random numbers (max 6 characters)
    private String generateUserId() {
        String[] nameParts = userName.split(" ");
        String baseName = nameParts[nameParts.length - 1].toLowerCase(); // Last name
        int randomNum = new Random().nextInt(100); // Random number 0-99
        return baseName + randomNum;
    }
}